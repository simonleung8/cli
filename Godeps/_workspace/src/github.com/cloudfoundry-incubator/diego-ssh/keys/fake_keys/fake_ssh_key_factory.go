// This file was generated by counterfeiter
package fake_keys

import (
	"sync"

	"github.com/cloudfoundry-incubator/diego-ssh/keys"
)

type FakeSSHKeyFactory struct {
	NewKeyPairStub        func(bits int) (keys.KeyPair, error)
	newKeyPairMutex       sync.RWMutex
	newKeyPairArgsForCall []struct {
		bits int
	}
	newKeyPairReturns struct {
		result1 keys.KeyPair
		result2 error
	}
}

func (fake *FakeSSHKeyFactory) NewKeyPair(bits int) (keys.KeyPair, error) {
	fake.newKeyPairMutex.Lock()
	fake.newKeyPairArgsForCall = append(fake.newKeyPairArgsForCall, struct {
		bits int
	}{bits})
	fake.newKeyPairMutex.Unlock()
	if fake.NewKeyPairStub != nil {
		return fake.NewKeyPairStub(bits)
	} else {
		return fake.newKeyPairReturns.result1, fake.newKeyPairReturns.result2
	}
}

func (fake *FakeSSHKeyFactory) NewKeyPairCallCount() int {
	fake.newKeyPairMutex.RLock()
	defer fake.newKeyPairMutex.RUnlock()
	return len(fake.newKeyPairArgsForCall)
}

func (fake *FakeSSHKeyFactory) NewKeyPairArgsForCall(i int) int {
	fake.newKeyPairMutex.RLock()
	defer fake.newKeyPairMutex.RUnlock()
	return fake.newKeyPairArgsForCall[i].bits
}

func (fake *FakeSSHKeyFactory) NewKeyPairReturns(result1 keys.KeyPair, result2 error) {
	fake.NewKeyPairStub = nil
	fake.newKeyPairReturns = struct {
		result1 keys.KeyPair
		result2 error
	}{result1, result2}
}

var _ keys.SSHKeyFactory = new(FakeSSHKeyFactory)
