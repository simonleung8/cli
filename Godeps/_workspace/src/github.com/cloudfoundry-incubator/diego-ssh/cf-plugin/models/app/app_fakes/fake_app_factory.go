// This file was generated by counterfeiter
package app_fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/diego-ssh/cf-plugin/models/app"
)

type FakeAppFactory struct {
	GetStub        func(string) (app.App, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 app.App
		result2 error
	}
	SetBoolStub        func(anApp app.App, key string, value bool) error
	setBoolMutex       sync.RWMutex
	setBoolArgsForCall []struct {
		anApp app.App
		key   string
		value bool
	}
	setBoolReturns struct {
		result1 error
	}
}

func (fake *FakeAppFactory) Get(arg1 string) (app.App, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeAppFactory) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeAppFactory) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].arg1
}

func (fake *FakeAppFactory) GetReturns(result1 app.App, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 app.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAppFactory) SetBool(anApp app.App, key string, value bool) error {
	fake.setBoolMutex.Lock()
	fake.setBoolArgsForCall = append(fake.setBoolArgsForCall, struct {
		anApp app.App
		key   string
		value bool
	}{anApp, key, value})
	fake.setBoolMutex.Unlock()
	if fake.SetBoolStub != nil {
		return fake.SetBoolStub(anApp, key, value)
	} else {
		return fake.setBoolReturns.result1
	}
}

func (fake *FakeAppFactory) SetBoolCallCount() int {
	fake.setBoolMutex.RLock()
	defer fake.setBoolMutex.RUnlock()
	return len(fake.setBoolArgsForCall)
}

func (fake *FakeAppFactory) SetBoolArgsForCall(i int) (app.App, string, bool) {
	fake.setBoolMutex.RLock()
	defer fake.setBoolMutex.RUnlock()
	return fake.setBoolArgsForCall[i].anApp, fake.setBoolArgsForCall[i].key, fake.setBoolArgsForCall[i].value
}

func (fake *FakeAppFactory) SetBoolReturns(result1 error) {
	fake.SetBoolStub = nil
	fake.setBoolReturns = struct {
		result1 error
	}{result1}
}

var _ app.AppFactory = new(FakeAppFactory)
